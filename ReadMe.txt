Тестовое задание на back-end разработчика.

Реализовать сервер, слушающий http запросы, реализация должна быть на стандартных библиотеках go.
Конфигурацию сервера хранить в файле конфигурации в json-структуре.
Минимальные данные файла:
Порт сервера, куда будет обращаться приложение.
Хост БД (IP)
Имя пользователя
Пароль
БД (схема)

Роутеры, которые необходимо реализовать:
POST – запросы
GET – запросы
PUT – запросы

Ниже приведены примеры, какие запросы по какому протоколу реализовывать.

Структура БД (используем postresql):

Подумайте и добавьте,  чего не хватает в структуре БД,  для реализации задания. 
Заданий в варианте, минимум три.

	Авторизация:
Логин (varchar)
Авторизован (boolean)
Дата и время авторизации (timestamp without time zone)
Дата и время когда вышел (timestamp without time zone)

БД, будет реализовывать тест:
	Список доступных вариантов:
ID (первичный ключ)
Name (varchar)
	
	Список заданий для варианта:
ID (первичный ключ)
Variant_ID (integer, внешний ключ к таблице список доступных вариантов)
Задание (varchar)
Правильный ответ 
4 варианта ответа (как реализовать решайте сами)

	Начало тестирования:
ID (первичный ключ) 
User_ID  (integer) – юзера
Variant_ID (integer, внешний ключ к таблице список доступных вариантов)
Дата и время начала тестирования (timestamp without time zone)

	Список ответов пользователей:
ID (первичный ключ)
Test_ID (внешний ключ к таблице начало тестирования) 
Ответ 
	
	Результаты: 
ID (первичный ключ) 
Test_ID (внешний ключ к таблице начало тестирования) 
Percent (int) процент правильных ответов


Запросы:
(От сервера (ответы) всегда должны лететь в виде json-объектов)
Авторизация, должна происходить по POST запросу с формы авторизации по средствам ajax. Где передается логин и пароль, для авторизации.
После этого открывается страница с выбором варианта. По клику на него начинается тест.
Получение каждого задания выполняется отдельным GET – запросом, с ID варианта и номером задания.
После завершения задания выводится информация о проценте правильных ответов. (GET)
При обращении по PUT, производить разлогирование клиента.

Дополнительные условия:
На сервере должны перехватываться исключения
Авторизация клиента должна проверяться при каждом действии
Сервер не должен висеть пока обрабатывает одного клиента
Должна быть валидация данных (к примеру, если клиент отправляет запрос на несуществующий ID варианта, то ему выходит оповещение, об ошибке)
Логирование в файл, всех обращений пользователя  (1) 


Дополнительные необязательные:
Защита от спама на сервер (поставить disabled на фронте не считается защитой).
Реализовать логирование обращений непосредственно к таблицам (на уровне БД).
Файл логов (см. 1), должен генерироваться каждый день, новый.
Если сервер многопоточный (клиенты обрабатываются параллельно), то сделать взаимную блокировку (средствами go) на момент вставки правильного ответа в БД. 